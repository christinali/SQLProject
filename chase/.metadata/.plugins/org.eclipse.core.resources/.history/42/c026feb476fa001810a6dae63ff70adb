package chase;
public Command getNewCommand(Token t) {
        if (t.getTokenType().equals("Command") && t.getNumberOfChildren() == t.getMaxArgCount()) { // TODO switch back

            String a1,a2,a3,a4;
            if(t.getChildren().size() > 0) a1 = t.getChildren().get(0).getTokenValue();
            else a1 = null;
            if(t.getChildren().size() > 1) a2 = t.getChildren().get(1).getTokenValue();
            else a2 = null;
            if(t.getChildren().size() > 2) a3 = t.getChildren().get(2).getTokenValue();
            else a3 = null;

            var variablesMap = interpreter.getCustomVariables();
            var commandsMap = interpreter.getCustomCommands();


            if(variablesMap.containsKey(a1) /*&& !t.getChildren().get(0).getTokenType().equals("Variable")*/) a1 = Double.toString(variablesMap.get(a1));
            if(variablesMap.containsKey(a2)) a2 = Double.toString(variablesMap.get(a2));

            if(t.getTokenValue().equals("DoTimes")){
                List<Token> varList = t.getChildren().get(0).getChildren();
                List<Token> commandList = t.getChildren().get(1).getChildren();
                commandList.remove(commandList.get(commandList.size()-1));


                String var = varList.get(0).getTokenValue();

                variablesMap.put(var, 1.0);

                double limit;
                if(varList.get(1).getTokenType().equals("Command")) {
                     limit = getNewCommand(varList.get(1)).getResult();
                }else{
                    limit = Double.parseDouble(varList.get(1).getTokenValue());
                }

                DoTimesCommand loop = new DoTimesCommand(var, limit);

                while(variablesMap.get(var) <= limit) {
                    loop.addCommandList(getCommandList(commandList));
                    variablesMap.put(var, variablesMap.get(var) + 1);
                }

                return loop;
            }
            else if(t.getTokenValue().equals("For")){
                List<Token> varList = t.getChildren().get(0).getChildren();
                List<Token> commandList = t.getChildren().get(1).getChildren();
                commandList.remove(commandList.get(commandList.size()-1));

                String var = varList.get(0).getTokenValue();

                double start;
                if(varList.get(1).getTokenType().equals("Command")) {
                    start = getNewCommand(varList.get(1)).getResult();
                }else{
                    start = Double.parseDouble(varList.get(1).getTokenValue());
                }

                double end;
                if(varList.get(2).getTokenType().equals("Command")) {
                    end = getNewCommand(varList.get(2)).getResult();
                }else{
                    end = Double.parseDouble(varList.get(2).getTokenValue());
                }

                double increment;
                if(varList.get(3).getTokenType().equals("Command")) {
                    increment = getNewCommand(varList.get(3)).getResult();
                }else{
                    increment = Double.parseDouble(varList.get(3).getTokenValue());
                }

                variablesMap.put(var, start);

                ForCommand loop = new ForCommand(var, start,end,increment);

                while(variablesMap.get(var) <= end) {
                    loop.addCommandList(getCommandList(commandList));
                    variablesMap.put(var, variablesMap.get(var) + increment);
                }

//                while(variablesMap.get(var) <= end) {
//                    for (Token c : commandList) {
//                        if (c.getTokenType().equals("ListEnd")) break;
//                        loop.addCommand(getNewCommand(c));
//                    }
//                    variablesMap.put(var, variablesMap.get(var) + increment);
//                }

                return loop;
            }
            else if(t.getTokenValue().equals("Repeat")) {
                double rep = Double.parseDouble(a1);
                List<Token> list = t.getChildren().get(1).getChildren();
                RepeatCommand loop = new RepeatCommand(rep);

                return loop;
            }
            else if (mathOperations.contains(t.getTokenValue()) || booleanOperations.contains(t.getTokenValue())) {
                Operation op;
                switch(t.getValidArgCount()){
                    case 0:
                        op = new Operation(t.getTokenValue());
                        break;
                    case 1:
                        op = new Operation(t.getTokenValue(), Double.parseDouble(a1));
                        break;
                    case 2:
                        op = new Operation(t.getTokenValue(), Double.parseDouble(a1), Double.parseDouble(a2));
                        break;
                    default:
                        op = new Operation(t.getTokenValue());
                        break;
                }
                return op;
            }
            else if (t.getTokenValue().equals("MakeVariable")) {
                //TODO: throw an actual error here
                if (!t.getChildren().get(0).getTokenType().equals("Variable") || t.getChildren().get(0).getTokenValue().isEmpty()) {
                    throw new InvalidArgumentException("Not a variable: " + t.getChildren().get(0));
                }
                return new CustomVariable(t.getTokenValue(),a1, Double.parseDouble(a2));
            }
            else if (t.getTokenValue().equals("MakeUserInstruction")) {
                List<String> arguments = new ArrayList<>();
                List<Token> toExecute = t.getChildren().get(2).getChildren();

                for(Token a : t.getChildren().get(1).getChildren()){
                    if(a.getTokenType().equals("ListEnd")) break;
                    arguments.add(a.getTokenValue());
                }

                CustomCommand c = new CustomCommand(t.getTokenValue(), t.getChildren().get(0).getLexeme(), arguments, toExecute);
                c.removeListEndToken();
                return c;
            }
            else if (t.getTokenValue().equals("Tell")) {
                return new Command(t.getTokenValue(), Double.parseDouble(t.getChildren().get(0).getChildren().get(0).getTokenValue()));
            }
            else {
                Command cmd;
                switch(t.getValidArgCount()){
                    case 0:
                        cmd = new Command(t.getTokenValue());
                        break;
                    case 1:
                        cmd = new Command(t.getTokenValue(), Double.parseDouble(a1));
                        break;
                    case 2:
                        cmd = new Command(t.getTokenValue(), Double.parseDouble(a1), Double.parseDouble(a2));
                    break;
                    case 3:
                        cmd = new Command(t.getTokenValue(), Double.parseDouble(a1), Double.parseDouble(a2), Double.parseDouble(a3));
                    default:
                        cmd = new Command(t.getTokenValue());
                    break;
                }
                return cmd;
            }
        }

         throw new InvalidNumberOfArgumentsException(myErrors.getString("InvalidNumberOfArguments") + " " + t);

    }
